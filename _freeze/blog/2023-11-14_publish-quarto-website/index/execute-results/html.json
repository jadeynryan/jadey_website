{
  "hash": "d006aa341ee04965ab9aa47df6535e7b",
  "result": {
    "markdown": "---\ntitle: \"Publish a Quarto website with Netlify\"\ndescription: \"Build a Quarto website and automatically publish it with GitHub, Netlify, and CI. This tutorial skips the middle part of actually crafting the website.\"\ndate: \"2023-11-14\"\nimage: img/netlify-deploys-gh.png\nimage-alt: \"Netlify deploy from GitHub\"\ncategories:\n  - R\n  - Quarto\n  - GitHub\n  - Netlify\nbibliography: references.bib\nexecute: \n  eval: false\nfilters: \n  - lightbox\nlightbox: auto\n---\n\n\nThankfully, there are already many amazing resources for building beautiful websites and blogs with Quarto. Instead of adding to that pool of content, I'll demo how I built my website with Quarto, connected to a GitHub repository, and published with Netlify [continuous deployment](https://docs.netlify.com/site-deploys/create-deploys/#deploy-with-git).\n\nI struggled for hours trying to set up the configurations (and in the right order) so the site would be deployed every time I committed to my GitHub repo. Hopefully this demo saves you some time when you start your own website! :)\n\nAs with most tech and dev stuff, there's many ways to do (almost) the same thing. I'd love to hear how other people have their Quarto/Netlify workflows set up!\n\nAnyhoo, keep on reading to learn about:\n\n-   options for publishing a Quarto website\n-   building a Quarto website as an RStudio project\n-   connecting this project to a GitHub repository\n-   the first manual Netlify deployment with the terminal\n-   setting up the configuration files for automatic rendering\n-   using Netlify's branch deploys and deploy previews\n-   installing the [Lighthouse](https://github.com/netlify/netlify-plugin-lighthouse#readme) plugin to audit your site's performance, accessibility, best practices, and SEO\n\n# Why Netlify? {.unnumbered}\n\nThere are lots of options for publishing Quarto websites:\n\n-   [GitHub Pages](https://quarto.org/docs/publishing/github-pages.html)\n-   [Quarto Pub](https://quarto.org/docs/publishing/quarto-pub#github-action)\n-   [Posit Connect](https://quarto.org/docs/publishing/rstudio-connect.html)\n-   [Confluence](https://quarto.org/docs/publishing/confluence.html)\n-   [Firebase](https://quarto.org/docs/publishing/other.html#google-firebase)\n-   [Site44](https://quarto.org/docs/publishing/other.html#site44)\n-   [Amazon S3](https://quarto.org/docs/publishing/other.html#amazon-s3)\n-   And of course, [Netlify](https://quarto.org/docs/publishing/netlify.html)\n\nHonestly, I was completely overwhelmed by all the options. I had to think about what was most important to me:\n\n1.  using my own custom domain\n2.  continuous integration so I could deploy from version control\n3.  easy configuration and maintenance\n\nI checked out what other #RStats bloggers[^1] were using and found most folks used GitHub Pages or Netlify.\n\n[^1]: See my [GitHub stars list](https://github.com/stars/jadeynryan/lists/blogs) for my favorite blogs or Quarto website resources.\n\nAfter some repo-diving and research, I decided to go with Netlify and their starter plan, shown below:\n\n![](img/netlify-starter.png){width=\"600\" fig-alt=\"Netlify starter stats for my account. Bandwidth is 745 MB/100 GB. Build minutes is 43/300. Concurrent builds is 0/1. Team members is 1.\"}\n\nI don't think I'll ever get near the starter plan limits, but who knows. If I exceed the limits, it becomes pay as you go or I can upgrade to $19/month.\n\nA major selling point for Netlify is the free [deployment preview system](https://docs.netlify.com/site-deploys/overview/). You can use **branch deploys** to preview changes from a feature branch or **deploy previews** to see changes from pull requests and merges. These deployment previews don't touch your site in production.\n\n::: callout-note\nAccording to this [discussion](https://github.com/orgs/community/discussions/7730), a similar feature is under development for GitHub pages.\n:::\n\nSee an [example Netlify bot comment](https://github.com/jadeynryan/jadey_website/pull/10) from a deploy preview:\n\n![](img/netlify-bot.png){fig-alt=\"GitHub merge request. Netlify bot commented a table with links to the latest commit, latest deploy log, deploy preview, and preview on mobile QR code.\"}\n\nJump to [Branch deploys and deploy previews] for more on branch deploys and deploy previews.\n\n::: callout-important\n## Important Note about Continuous Integration (CI)\n\nNetlify servers can render markdown and build the website, but cannot execute code. This means all code must be executed locally on our computers and the output must be saved via the [Quarto freeze feature](https://quarto.org/docs/projects/code-execution.html#freeze) AND committed to your repo.[^2]\n\nRead this [article](https://quarto.org/docs/publishing/ci.html#rendering-for-ci) to learn more about rendering Quarto documents and websites with CI. The article discusses a continuum that extends from running everything locally to running everything remotely on a CI server. The workflow presented in this post sits in the middle:\n\n![](img/ci-continuum.png){fig-alt=\"Graphic of continuous integration continuum with double sided arrow. On the very left is Local Execution & Rendering where the local machine runs code and renders the site and the C server checks the output is copied from version control to the right place. In the middle is Local Execution with CI Rendering where local machine runs code and saves output in the _freeze directory and the CI server with Quarto installed renders the site. The right is CI Execution and Rendering where the CI server executes all code and renders the site; Quarto and all code dependencies must be available on the CI server.\"}\n\nIf you need to execute code with CI, instead of `Step 4. Deploy with Netlify bots`, you'll need to [configure a GitHub Action](https://quarto.org/docs/publishing/netlify.html#executing-code) that installs Quarto, R, and dependencies; executes code; renders the site; and publishes to Netlify.\n:::\n\n[^2]: See what happens if you don't have `freeze` set to `auto` or `true` AND commit the freeze outputs in this [issue comment](https://github.com/quarto-dev/quarto-cli/issues/1956#issuecomment-1773958407).\n\n# The complete walk-through {.unnumbered}\n\nIf you're still interested in creating a website with Quarto and deploying it with Netlify, follow along to get started!\n\n# Create a Quarto website\n\nIn RStudio, go to `File` \\> `New Project` \\> `New Directory` to open the **New Project Wizard**.\n\nLet's start with a website. If you'd like to add a blog later on, Samantha Csik wrote a great blog post explaining this process [@csik2022].\n\n![](img/rstudio-project-wizard.png){fig-alt=\"New project wizard with box around Quarto Website.\" width=\"500\"}\n\n::: callout-warning\n## Are you new to GitHub?\n\nI'm assuming you already use GitHub and have it connected to your RStudio. If you haven't, please follow the installation instructions in [Happy Git and GitHub for the useR](https://happygitwithr.com/) [@bryan2023] and then come back.\n:::\n\nChoose the name of your directory (which will also be the name of your GitHub repository), check the `Create a git repository` box, then click `Create Project`.\n\n![](img/create-website.png){fig-alt=\"Create Quarto Website dialog box with a field for directory name and a checkbox selected to create a git repository.\" width=\"500\"}\n\nYou should now be in a RStudio project that has `index.qmd` and `_quarto.yml` open and some new things in your `Files pane`:\n\n![](img/rstudio-website.png){fig-alt=\"RStudio with index.qmd and _quarto.yml open and many new folders and files in the files pane.\" width=\"500\"}\n\nYour `Files pane` should be populated with the following:\n\n```         \n‚îú‚îÄ‚îÄ _quarto.yml         # Website configuration file\n‚îú‚îÄ‚îÄ about.qmd           # About page\n‚îú‚îÄ‚îÄ index.qmd           # Landing page\n‚îú‚îÄ‚îÄ my-website.Rproj    # RStudio project config file\n‚îî‚îÄ‚îÄ styles.css          # CSS file for any custom styling\n```\n\nNotice we also have a `Git pane` with all of these files unstaged and no branches are available. This is because we haven't created a repository on GitHub and connected it with this project yet.\n\n![](img/git-pane.png){fig-alt=\"RStudio Git pane with a box around (no branch).\" width=\"500\"}\n\n# Create and connect to GitHub\n\nIf you're following along with [Happy Git and GitHub for the useR](https://happygitwithr.com/) [@bryan2023], we're using the [`Existing project, GitHub last`](https://happygitwithr.com/existing-github-last) workflow.\n\nThankfully, we can use the `usethis` package so we don't have to touch the terminal! If you haven't used `usethis` yet, you'll need to do the setup described in the [package documentation](https://usethis.r-lib.org/articles/usethis-setup.html#install-git).\n\nAssuming you have connected and authenticated your GitHub account in RStudio, you can create and connect your project to a repository with just *two* lines of code Ô∏èüßôüèº‚Äç‚ôÄÔ∏è.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ‚úî Setting active project to '/Users/jadeyryan/Library/CloudStorage/Dropbox/Mac/Documents/my-website'\n# ‚úî Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store', '.quarto' to '.gitignore'\n# There are 6 uncommitted files:\n# * '_quarto.yml'\n# * '.gitignore'\n# * 'about.qmd'\n# * 'index.qmd'\n# * 'my-website.Rproj'\n# * 'styles.css'\n# Is it ok to commit them?\n# \n# 1: Negative\n# 2: Nope\n# 3: Yeah\n# \n# Selection: 3\n# ‚úî Adding files\n# ‚úî Making a commit with message 'Initial commit'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ‚Ñπ Defaulting to 'https' Git protocol\n# ‚úî Creating GitHub repository 'jadeynryan/my-website'\n# ‚úî Setting remote 'origin' to 'https://github.com/jadeynryan/my-website.git'\n# ‚úî Pushing 'main' branch to GitHub and setting 'origin/main' as upstream branch\n# ‚úî Opening URL 'https://github.com/jadeynryan/my-website'\n```\n:::\n\n\nYour new GitHub repository should open in your browser.\n\n# Connect and publish to Netlify\n\nIn order to use Netlify's continuous deployment, we need to connect our Git provider to our Netlify account. If you don't have a Netlify account yet, you can [sign up](https://app.netlify.com/signup) with GitHub.\n\n![](img/netlify-signup.png){fig-alt=\"Netlify signup page with GitHub login.\" width=\"400\"}\n\nOnce we're logged into Netlify and connected to our GitHub, we can do the initial deployment with the Quarto CLI. In the RStudio `Terminal`, run:\n\n``` {.bash filename=\"Terminal\"}\nquarto publish netlify\n```\n\nIf you're not already logged in to Netlify on your browser, there may be an additional authentication step.\n\n![](img/quarto-publish-netlify.png){fig-alt=\"quarto publish netlify command run in the RStudio terminal.\"}\n\nThis command rendered your site locally, uploaded all the static files to Netlify, deployed and published your new site! The site overview on Netlify should have opened in your browser:\n\n![](img/netlify-site-overview.png){fig-alt=\"Site overview on Netlify with boxes around the random subdomain name and the status as a manual deploy.\" width=\"400\"}\n\nNote that Netlify provided a random site name (**`stately-chimera-0c91c7`**) on the `netlify.app` domain. Also, notice that it says `Manual deploys` underneath the site link, meaning it was deployed from the `quarto publish netlify` command in our terminal and not from GitHub.\n\nClick on the link to open your live site!\n\n![](img/live-website.png){fig-alt=\"Screenshot of live website at stately-chimera-0c91c7.netlify.app.\"}\n\n## Site domain name\n\nThe domain name is the URL or web address to your site. You have two options to rename your site:\n\n-   **Free**: change the random name provided but keep the `netlify.app` domain.\n-   **Purchase a new domain**: I recommend buying it directly on Netlify so they handle all the NS1 [DNS](https://ns1.com/products/dedicated-dns) configurations. Or, buy from a domain provider that doesn't use the NS1 DNS zone, or you might go through this nightmare of having to switch DNS zones.[^3]\n\n[^3]: I originally bought a domain from Square Space and could not set my Netlify site to that domain due to DNS issues that I don't fully understand. Here's a [support forum thread](https://answers.netlify.com/t/trying-to-move-domain-from-squarespace-to-netlify/11879) on Netlify with the instructions for pointing a custom domain to a Netlify site. I ended up buying another domain directly from Netlify...\n\n    ![](img/netlify-dns-error.png){fig-alt=\"An error when trying to add a custom domain purchased from Squarespace. The error says a DNS zone already exists on NS1.\" width=\"400\"}\n\n    DNS stuff is so confusing. ü´§\n\n### Free domain name change\n\nLet's walk through the free option first.\n\nFrom the site overview Netlify page, click on `Site configuration`.\n\n![](img/netlify-site-config.png){fig-alt=\"Netlify website site overview with box around site configuration.\" width=\"400\"}\n\nScroll down to `Site information`, and then click on `Change site name`.\n\n![](img/netlify-site-info.png){fig-alt=\"Site information page on Netlify with button to change site name.\" width=\"400\"}\n\nNow you can update the site name:\n\n![](img/netlify-change-site-name.png){fig-alt=\"Netlify change site name dialog box with new name of my-website24.netlify.app.\"}\n\nNote your site name is just the prefix to the full URL containing `netlify.app`.\n\n### Buy a domain name\n\nIf you don't want the `netlify.app` domain, you can purchase your own. Instead of `Site configuration`, go to the `Domain management` part of the site, and then click `Add a domain`.\n\n![](img/netlify-domain-mgmt.png){fig-alt=\"Domain management part of Netlify site with option to add a domain.\"}\n\nType in whatever custom domain you want: there are a bajillion different extensions. [domain.com](https://www.domain.com/domains/new-domain-extensions) lists them alphabetically and has a helpful FAQ section about domain extensions. If your desired name and extension is available, you can register the domain for the listed price. \n\n![](img/netlify-add-custom-domain.png){fig-alt=\"Add a custom domain to your site page on netlify. It says my-website24.com is available and costs $13.99 for the first year.\" width=\"500\"}\n\nI liked this option because Netlify automatically did the DNS configuration for me!\n\n## New `_publish.yml` file\n\nNow that we're set up with Netlify and GitHub, let's head back over to RStudio. Notice this new file appeared in the project directory when we used the `quarto publish netlify` command:\n\n``` {.yaml filename=\"_publish.yml\"}\n- source: project\n  netlify:\n    - id: b9f73a69-06e7-4de2-9c7b-4f9855b56ba3\n      url: 'https://stately-chimera-0c91c7.netlify.app'\n```\n\nIt automatically filled in the original random URL from Netlify.\n\nThe next time we manually publish from the terminal, it will ask if we want to publish the update to `https://my-website24.netlify.app`. If we enter `y`, it will update the `url` value in the `_publish.yml` file.\n\n``` {.bash filename=\"Terminal\"}\n(base) MacBook-Pro-4:my-website jadeyryan$ quarto publish netlify\n? Publish update to: ‚Ä∫ https://stately-chimera-0c91c7.netlify.app (Netlify - jadey.nicole.ryan@gmail.com)\nRendering for publish:\n\n[1/2] index.qmd\n[2/2] about.qmd\n\n[‚úì] Preparing to publish site\n[‚úì] Uploading files (complete)\n[‚úì] Deploying published site\n[‚úì] Published site: https://stately-chimera-0c91c7.netlify.app\n\n(base) MacBook-Pro-4:my-website jadeyryan$ quarto publish netlify\n? Publish update to: ‚Ä∫ https://my-website24.netlify.app (Netlify - jadey.nicole.ryan@gmail.com)\nRendering for publish:\n\n[1/2] index.qmd\n[2/2] about.qmd\n\n[‚úì] Preparing to publish site\n[‚úì] Uploading files (complete)\n[‚úì] Deploying published site\n[‚úì] Published site: https://my-website24.netlify.app\n```\n\n::: callout-important\nIf you continue to the next steps for configuring continuous deployment, this should be your last time manually publishing your site with `quarto publish netlify` in your Terminal.\n\nHowever, if you add any code content, you should still run `quarto render` in your Terminal to update the `_freeze` directory.\n:::\n\n# Configure continuous deployment\n\nNow we need to configure several things so Netlify's bots can automatically deploy our site:\n\n-   Add Quarto Netlify plugin files\n-   Freeze code output by setting `freeze: auto` in `_quarto.yml`\n-   Ignore output directory by adding `_site` directory to `.gitignore`\n-   Link Netlify site to GitHub repository\n\n## Configure Netlify plugin\n\nThe [Quarto Netlify plugin](https://github.com/quarto-dev/netlify-plugin-quarto) installs Quarto on the Netlify build server, allowing Netlify to build our Quarto website.\n\nLet's create the following two files in our RStudio project and copy the content below into these files.\n\n``` {.toml filename=\"netlify.toml\"}\n[[plugins]]\npackage = \"@quarto/netlify-plugin-quarto\"\n```\n\n``` {.json filename=\"package.json\"}\n{\n  \"dependencies\": {\n    \"@quarto/netlify-plugin-quarto\": \"^0.0.5\"\n  }\n}\n```\n\n## Freeze computations\n\nWe need to [freeze](https://quarto.org/docs/projects/code-execution.html#freeze) computations so code only runs locally. When we render a `.qmd` that executes code, the results get saved in a `html.json` file within a `_freeze` directory. This means that R and our packages don't need to be installed on the Netlify server to execute the code.\n\nThe `_freeze` directory and all its files must be committed to our repo. Otherwise, the build will fail because Netlify doesn't have R and the dependencies installed to run the code (see the detailed error in my [comment](https://github.com/quarto-dev/quarto-cli/issues/1956#issuecomment-1773958407)).\n\nWe'll add these two lines to our `_quarto.yml` file:\n\n``` {.yaml filename=\"_quarto.yml\"}\nexecute:\n  freeze: auto\n```\n\nIf you need to execute code within a CI service, see the [Quarto docs](https://quarto.org/docs/projects/code-execution.html#freeze) for example GitHub actions.\n\n## Ignore output directory\n\nBecause we want Netlify bots to use continuous deployment to build our site, we need to ignore our output directory. To do this, we add the `_site` directory that contains all the rendered website content to our `.gitignore` file. This is recommended in the [Quarto docs](https://quarto.org/docs/publishing/netlify.html#ignoring-output-1) to avoid super messy diffs and potential merge conflicts.\n\n``` {.bash filename=\".gitignore\"}\n/_site/\n```\n\n::: callout-note\nIf you're not following the workflow in this blog post and instead are using the `Local Execution & Rendering` option of the CI continuum described in the [Quarto docs](https://quarto.org/docs/publishing/ci.html#rendering-for-ci), do not add `_site` to your `.gitignore`. You need this directory checked into version control so Netlify's CI server can access this content to deploy your website.\n:::\n\n## Link Netlify site to GitHub repository\n\nNow we need to link our GitHub repository to our Netlify site.\n\nOn the Netlify site, go to `Site configuration` \\> `Build & deploy` \\> `Continous deployment` \\> `Link repository`.\n\n![](img/netlify-link-repo.png){fig-alt=\"Netlify site on the continuous deployment page with a box around the link repository button.\" width=\"700\"}\n\nChoose `Deploy with GitHub`:\n\n![](img/netlify-connect-git.png){fig-alt=\"Netlify site to connect to Git provider. Options to link site to Git repository for GitHub, GitLab, Bitbucket, and Azure DevOps.\" width=\"500\"}\n\nIf you're already logged into GitHub, it should immediately authorize and allow you to select which repositories the Netlify app can access.\n\nIf this is your first time deploying with Netlify and GitHub, you'll likely need to click the bottom link `Configure the Netlify app on GitHub` near the bottom of the Netlify site. This should open a new window `Installed GitHub App - Netlify` where you can make sure the Netlify app is installed on your GitHub and select which repositories it can access.\n\n![](img/netlify-select-repos.png){fig-alt=\"Netlify website Link your site to a Git Repository with box around 'Can't see your repo here? Configure the Netlify app on GitHub' link and arrow pointing to a new popup window that allows you to select which repositories Netlify can access.\"}\n\nAfter selecting the correct repository, let's configure the build settings on the next screen. Enter `_site` in the `Publish directory` field:\n\n![](img/netlify-build-settings.png){width=\"500\" fig-alt=\"Netlify site configuration build settings. All settings are blank except the Publish directory should be set to _site.\"}\n\n<!-- Am I missing a screenshot of the Deploy my website button? -->\n\nOnce we click `Deploy my-website24`, it takes us back to our site overview page and it will now say `Deploys from GitHub` instead of `Manual deploys` below the link.\n\n![](img/netlify-deploys-gh.png){width=\"400\" fig-alt=\"Netlify site overview with website URL and text 'Deploys from GitHub'.\"}\n\n## Push a change to our repo\n\nLet's push a change to our repo and make sure it is automatically rebuild and deployed!\n\nNext we'll add some content to `about.qmd` and push to `main`.\n\n![](img/github-push-change.png){fig-alt=\"GitHub repository with recent commit 0b8b526.\"}\n\nOn the `Deploys` page on Netlify, we can see we successfully published `main@0b8b526`.\n\n![](img/netlify-published.png){fig-alt=\"Netlify site Deploys page that shows main@0b8b526  was successfully published.\"}\n\nSince we pushed directly to `main` and `auto publishing` is turned on, all successful deployments are automatically published to our production site.\n\nWe could click `Lock to stop auto publishing` to turn this setting off. This means the site will still build every time we push changes to our repo, but we will need to click a button to actually publish this latest build. This is a good option if we don't want to work in new branches or use pull requests/merges in our workflow, but still want to preview our site before sending it to production.\n\n# Branch deploys and deploy previews\n\nAs we work on our website styling, content, and features, we may want to preview what our deployed site would look like without messing up our live site. This is where Netlify's branch deploys and deploy previews come into play!\n\nThe table below (adapted from [Netlify's docs](https://docs.netlify.com/site-deploys/overview/)) provides a quick comparison of the differences between branch deploys and deploy preview.\n\n+-------------------+------------------------------------------------+-------------------------------------------------------------------------------------+\n|                   | Branch deploys                                 | Deploy previews                                                                     |\n+===================+================================================+=====================================================================================+\n| **Default setup** | Must setup on Netlify website[^4]              | No setup needed                                                                     |\n+-------------------+------------------------------------------------+-------------------------------------------------------------------------------------+\n| **URL**           | \\<branch-name\\>\\--\\<website\\>.netlify.app      | deploy-preview-\\<PR#\\>\\--\\<website\\>.netlify.app                                    |\n|                   |                                                |                                                                                     |\n|                   | ex. https://staging--my-website24.netlify.app/ | ex. https://deploy-preview-1--my-website24.netlify.app/                             |\n+-------------------+------------------------------------------------+-------------------------------------------------------------------------------------+\n| **Access**        | Netlify website deploys section                | Netlify website deploys section or Netlify bot comment on GitHub pull/merge request |\n+-------------------+------------------------------------------------+-------------------------------------------------------------------------------------+\n| **Scope**         | Changes from feature branch                    | Changes from pull/merge request                                                     |\n+-------------------+------------------------------------------------+-------------------------------------------------------------------------------------+\n: {tbl-colwidths=\"[10,45,45]\"}\n\n[^4]: Netlify.com \\> \\[Your website\\] \\> Site configuration \\> Build & deploy \\> Continuous Deployment \\> Branches and deploy contexts\n\nSee more details on the differences between branch deploys and deploy previews in [Netlify's docs](https://docs.netlify.com/site-deploys/overview/).\n\n## Branch deploys\n\nBranch deploys are great if you typically use feature branches in your workflow.\n\nBy default, only the production branch (typically `main`) is automatically deployed by Netlify.\n\nTo enable branch deploys on other branches, we need to change the branch deploy setting. On the Netlify website \\> `Site Configuration` \\> `Build & deploy` \\> `Continuous deployment` \\> `Branches and deploy contexts` \\> `Branch deploys` \\> Select the `All` radio button.\n\n![](img/netlify-branch-deploy-context.png){fig-alt=\"Netlify site configuration webpage with the branches and deploy contexts settings open. Branch deploys is set to All instead of None.\"}\n\nOr, if we only want to deploy previews for a specific feature branch, we would select `Let me add individual branches` then enter the name of our feature branch.\n\nLet's create a new branch called `staging` and push a commit with the message 'Testing branch deploy'.\n\nOn the Netlify `Deploys` page, we can see our published site is still from `main` but we now have a `Branch deploy` from `staging`.\n\n![](img/netlify-branch-deploy.png){fig-alt=\"Netlify deploys webpage for demo site highlighting the published site is deployed from the main production branch. Lower on the screen is the branch deploy which shows it was deployed from the staging branch.\"}\n\nClick on the branch deploy to preview the site with the changes you made on that branch.\n\n## Deploy previews\n\nDeploy previews are enabled by default once our Netlify site is linked with our GitHub repository. Every time we make a pull request or merge, Netlify's bots will build and deploy our site and then comment on our pull/merge request with the URL links.\n\nFrom our GitHub repository, let's create a pull request to merge our `staging` branch into `main`.\n\nThe Netlify bot will comment all the information for the deploy preview including a link to the commit, the deploy log, preview link, and a QR code to scan on a mobile device.\n\n![](img/netlify-bot.png){fig-alt=\"GitHub merge request. Netlify bot commented a table with links to the latest commit, latest deploy log, deploy preview, and preview on mobile QR code.\"}\n\nWe can also access our deploy preview from the Netlify `Deploys` page. Similar to the branch deploy, our published site is still from `main,` but we now have `Deploy Preview #2` from `staging`. Remember the #2 just means this was the second pull/merge request in our repository.\n\n![](img/netlify-deploy-preview.png){fig-alt=\"Netlify deploys webpage for demo site highlighting the published site is deployed from the main production branch. Lower on the screen is the deploy preview which shows it was deployed from Pull Request #2.\"}\n\nClick on the deploy preview #2 link to preview the site with the changes we made based on that pull request.\n\n# Lighthouse plugin\n\nAnother benefit of using Netlify are the integrations with different web tools. The only one I am using so far is [Google's Lighthouse tool](https://developer.chrome.com/docs/lighthouse/overview/), which helps me to abide by my [accessibility commitment](https://jadeyryan.com/accessibility).\n\nOnce installed, the [Lighthouse plugin](https://github.com/netlify/netlify-plugin-lighthouse#readme) audits our site for performance, accessibility, best practices, and SEO at build time. We'll see our scores for each of these four categories in our deploy previews.\n\nTo enable the plugin, let's go to our Netlify site \\> `Integrations` \\> search for lighthouse \\> `Enable`.\n\n![](img/netlify-lighthouse.png){fig-alt=\"Netlify integrations page searching for lighthouse with box highlighting the Enable button for the Lighthouse plugin.\"}\n\nNetlify will then ask if we're sure we want to install Lighthouse on our website. It's as easy as that!\n\nNow let's push another commit to see our Lighthouse report in the Netlify bot comment.\n\nNotice the original Netlify bot comment was edited so the GitHub pull request conversation isn't overly cluttered.\n\nOur Lighthouse audit showed pretty high scores for each of the categories. We can view the more detailed breakdown to see where we can make improvements.\n\n![](img/netlify-bot-lighthouse.png){fig-alt=\"GitHub pull request conversation with netlify bot comment that was edited with the latest commit, deploy log, preview URL, and Lighthouse audit.\"}\n\n# Workflow\n\nMy general workflow for editing my website is as follows:\n\n1.  Add/edit/remove content.\n2.  Run `quarto rendeÔ∏èr` in Terminal.\n3.  Push changes to GitHub [in a new branch, or directly to `main` if I'm feeling brave ü¶∏üèª‚Äç‚ôÄÔ∏è].\n4.  Review changes.\n5.  \\[Optional\\]: Edit based on Lighthouse audit scores.\n6.  Rinse and repeat!\n\n# Wrap up\n\nI hope you found this post helpful for getting your Quarto website configured with Netlify, GitHub, and continuous deployment!\n\nSince this is my first blog post, I'd love feedback on the style, flow, helpfulness, content, etc. I have a new-found, very deep appreciation for all the bloggers out there! This took quite a lot of time and head space to make a \\[hopefully\\] cohesive and helpful post!\n\n# References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}