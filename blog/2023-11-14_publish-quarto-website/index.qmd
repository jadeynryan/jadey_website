---
title: "Publish a Quarto website with Netlify"
description: "Create a Quarto website, connect it to GitHub, deploy & publish it with Netlify."
date: "2023-11-14"
image: thumbnail.png
image-alt: "My three cats cuddling on my legs. Quarto, GitHub, and Netlify logos are placed on top of them."
categories:
  - R
  - Quarto
  - GitHub
  - Netlify
bibliography: references.bib
execute: 
  eval: false
---

Thankfully, many amazing [resources](https://github.com/mcanouil/awesome-quarto) for building beautiful websites and blogs with Quarto already exist. Instead of adding to that pool of content, I'll demo how I built my website with Quarto, connected to a GitHub repository, and then deployed and published with Netlify [continuous deployment](https://docs.netlify.com/site-deploys/create-deploys/#deploy-with-git).

I struggled for hours trying to set up the configurations so my site would deploy every time I pushed a change to my GitHub repo. Hopefully this demo saves you some time when you start your own website! :)

As with most tech and dev stuff, there's many ways to do (almost) the same thing. I'd love to hear how other people have their Quarto/Netlify workflows set up. Leave a comment at the end of the post, or reach out!

Anyhoo, keep on reading to learn about:

-   options for publishing a Quarto website
-   creating a Quarto website as an RStudio project
-   connecting this project to a GitHub repository
-   initially publishing to Netlify using the Quarto CLI
-   setting up the configuration files for continuous deployment
-   using Netlify's branch deploys and deploy previews
-   installing the [Lighthouse](https://github.com/netlify/netlify-plugin-lighthouse#readme) plugin to audit your site's performance, accessibility, best practices, and SEO at build time

# Why Netlify? {.unnumbered}

There are lots of options for publishing Quarto websites:

-   [GitHub Pages](https://quarto.org/docs/publishing/github-pages.html)
-   [Quarto Pub](https://quarto.org/docs/publishing/quarto-pub#github-action)
-   [Posit Connect](https://quarto.org/docs/publishing/rstudio-connect.html)
-   [Confluence](https://quarto.org/docs/publishing/confluence.html)
-   [Firebase](https://quarto.org/docs/publishing/other.html#google-firebase)
-   [Site44](https://quarto.org/docs/publishing/other.html#site44)
-   [Amazon S3](https://quarto.org/docs/publishing/other.html#amazon-s3)
-   And of course, [Netlify](https://quarto.org/docs/publishing/netlify.html)

Honestly, I was completely overwhelmed by all the options. I had to think about what was most important to me:

1.  using my own custom domain
2.  continuous integration so I could deploy from version control
3.  easy configuration and maintenance

I checked out what other #RStats bloggers[^1] were using and found many folks used GitHub Pages or Netlify.

[^1]: See my [GitHub stars list](https://github.com/stars/jadeynryan/lists/blogs) for my favorite blogs or Quarto website resources.

After some repo-diving and research, I decided to go with Netlify and their starter plan, shown below:

![](img/netlify-starter.png){width="600" fig-alt="Netlify starter stats for my account. Bandwidth is 745 MB/100 GB. Build minutes is 43/300. Concurrent builds is 0/1. Team members is 1."}

I don't think I'll ever get near the starter plan limits, but who knows. If I exceed the limits, I pay as I go. Or, I can upgrade to \$19/month for much higher limits.

A major selling point for Netlify is the free [deployment preview system](https://docs.netlify.com/site-deploys/overview/). We can use **branch deploys** to preview changes from a feature branch or **deploy previews** to see changes from pull requests and merges. These deployment previews don't touch our site in production.

::: callout-note
## Differences between **deploy** and **publish**

I was confused about the terminology of deploying and publishing a website. While they seem interchangeable, there are some subtle differences.

**Deploys** push files to Netlify's server and build the site. We can have multiple deploys with their own unique URLs that we use to preview changes. These represent our site at specific points in time and are useful for testing or staging.

**Publishing** makes the deployed site publicly available at our main URL. This published site is what I'll call our site in production, meaning it's live and accessible to users.
:::

According to this [discussion](https://github.com/orgs/community/discussions/7730), a similar feature is under development for GitHub Pages.

Jump to [Branch deploys and deploy previews] for more on branch deploys and deploy previews.

::: callout-important
## Important Note about Continuous Integration (CI)

Netlify servers can render markdown and build the website[^2], but cannot execute code[^3]. This means all code must be executed locally on our computer and the output must be saved via the [Quarto freeze feature](https://quarto.org/docs/projects/code-execution.html#freeze) AND committed to our repo.[^4]

Read this [article](https://quarto.org/docs/publishing/ci.html#rendering-for-ci) to learn more about rendering Quarto documents and websites with CI. The article discusses a continuum that extends from running everything **locally** to running everything **remotely** on a CI server. The workflow presented in this post sits in the middle:

![](img/ci-continuum.png){fig-alt="Graphic of continuous integration continuum with double sided arrow. On the very left is Local Execution & Rendering where the local machine runs code and renders the site and the C server checks the output is copied from version control to the right place. In the middle is Local Execution with CI Rendering where local machine runs code and saves output in the _freeze directory and the CI server with Quarto installed renders the site. The right is CI Execution and Rendering where the CI server executes all code and renders the site; Quarto and all code dependencies must be available on the CI server."}

If we need to execute code with CI, instead of `Step 4. Deploy with Netlify bots`, we would [configure a GitHub Action](https://quarto.org/docs/publishing/netlify.html#executing-code) that installs Quarto, R, and dependencies; executes code; renders the site; and then deploys and publishes to Netlify.
:::

[^2]: As long we [Configure Netlify plugin].

[^3]: Unless we have a [GitHub Action](https://quarto.org/docs/publishing/netlify.html#executing-code) install R and package dependencies.

[^4]: [This](https://github.com/quarto-dev/quarto-cli/issues/1956#issuecomment-1773958407) is what happens if we don't have `freeze` set to `auto` or `true` AND commit the freeze outputs.

# The complete walk-through {.unnumbered}

If you're still interested in creating a website with Quarto and publishing with Netlify, follow along to get started!

# Create a Quarto website

In RStudio, go to `File` \> `New Project` \> `New Directory` to open the **New Project Wizard**.

Let's start with a website. If you'd like to add a blog later on, Samantha Csik wrote a great blog post explaining this process [@csik2022].

![](img/rstudio-project-wizard.png){fig-alt="New project wizard with box around Quarto Website." width="500"}

::: callout-warning
## Are you new to GitHub?

I'm assuming you already use GitHub and connected it to RStudio. If you haven't, please follow the installation instructions in [Happy Git and GitHub for the useR](https://happygitwithr.com/) [@bryan2023] and then come back.
:::

Choose the name of our directory (which will also be the name of our GitHub repository), check the `Create a git repository` box, then click `Create Project`.

![](img/create-website.png){fig-alt="Create Quarto Website dialog box with a field for directory name and a checkbox selected to create a git repository." width="500"}

We should now be in a RStudio project that has `index.qmd` and `_quarto.yml` open and some new things in our `Files pane`:

![](img/rstudio-website.png){fig-alt="RStudio with index.qmd and _quarto.yml open and many new folders and files in the files pane." width="500"}

Our `Files pane` should have the following:

```         
‚îú‚îÄ‚îÄ _quarto.yml         # Website configuration file
‚îú‚îÄ‚îÄ about.qmd           # About page
‚îú‚îÄ‚îÄ index.qmd           # Landing page
‚îú‚îÄ‚îÄ my-website.Rproj    # RStudio project config file
‚îî‚îÄ‚îÄ styles.css          # CSS file for any custom styling
```

Notice we also have a `Git pane` with all of these files unstaged and no branches available. This is because we haven't created a repository on GitHub and connected it with this project yet.

![](img/git-pane.png){fig-alt="RStudio Git pane with a box around (no branch)." width="500"}

# Create and connect to GitHub

If you're following along with [Happy Git and GitHub for the useR](https://happygitwithr.com/) [@bryan2023], we're using the [`Existing project, GitHub last`](https://happygitwithr.com/existing-github-last) workflow.

Thankfully, we can use the `usethis` package so we don't have to touch the terminal (yet)! If you haven't used `usethis` yet, you'll need to do the setup described in the [package documentation](https://usethis.r-lib.org/articles/usethis-setup.html#install-git).

Assuming we've connected and authenticated our GitHub account in RStudio, we use just *two* lines of code to create and connect a repository Ô∏èto our project üßôüèº‚Äç‚ôÄÔ∏è.

```{r}
usethis::use_git()
```

```{r}
# ‚úî Setting active project to '/Users/jadeyryan/Library/CloudStorage/Dropbox/Mac/Documents/my-website'
# ‚úî Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store', '.quarto' to '.gitignore'
# There are 6 uncommitted files:
# * '_quarto.yml'
# * '.gitignore'
# * 'about.qmd'
# * 'index.qmd'
# * 'my-website.Rproj'
# * 'styles.css'
# Is it ok to commit them?
#
# 1: Negative
# 2: Nope
# 3: Yeah
#
# Selection: 3
# ‚úî Adding files
# ‚úî Making a commit with message 'Initial commit'
```

```{r}
usethis::use_github()
```

```{r}
# ‚Ñπ Defaulting to 'https' Git protocol
# ‚úî Creating GitHub repository 'jadeynryan/my-website'
# ‚úî Setting remote 'origin' to 'https://github.com/jadeynryan/my-website.git'
# ‚úî Pushing 'main' branch to GitHub and setting 'origin/main' as upstream branch
# ‚úî Opening URL 'https://github.com/jadeynryan/my-website'
```

Our new GitHub repository should open in our browser.

# Connect and publish to Netlify

In order to use Netlify's continuous deployment, we need to connect our Git provider to our Netlify account. If you don't have a Netlify account yet, you can [sign up](https://app.netlify.com/signup) with GitHub.

![](img/netlify-signup.png){fig-alt="Netlify signup page with GitHub login." width="400"}

Once we're logged into Netlify and connected to our GitHub, we can do the initial publishing with the Quarto CLI. In the terminal, run:

``` {.bash filename="Terminal"}
quarto publish netlify
```

If you're not already logged in to Netlify on your browser, there may be an additional authentication step.

![](img/quarto-publish-netlify.png){fig-alt="quarto publish netlify command run in the RStudio terminal."}

This command rendered our site locally, uploaded all the static files to Netlify, deployed and published our new site! The site overview on Netlify should have opened in our browser:

![](img/netlify-site-overview.png){fig-alt="Site overview on Netlify with boxes around the random subdomain name and the status as a manual deploy." width="400"}

Netlify provided a random site name (**`stately-chimera-0c91c7`**) on the `netlify.app` domain. Also, notice that it says `Manual deploys` underneath the site link, meaning it was deployed from the `quarto publish netlify` command in our terminal and not from GitHub.

Click on that link to open our live site!

![](img/live-website.png){fig-alt="Screenshot of live website at stately-chimera-0c91c7.netlify.app."}

## Site domain name

The domain name is the URL or web address to our site. We have two options to rename our site:

-   **Free**: change the random name provided but keep the `netlify.app` domain.
-   **Purchase a new domain**: I recommend buying it directly on Netlify so they handle all the [DNS](https://ns1.com/products/dedicated-dns) configurations. Or, buy from a domain provider that doesn't use the NS1 DNS zone, or you might go through this nightmare of having to switch DNS zones.[^5]

[^5]: I originally bought a domain from Square Space and could not set my Netlify site to that domain due to DNS issues that I don't fully understand. When trying to add a domain, Netlify gave this error message: `A DNS zone for this domain already exists on NS1, the DNS provider backing Netlify DNS. Please contact NS1 with the domain name for support`. Here's a [support forum thread](https://answers.netlify.com/t/trying-to-move-domain-from-squarespace-to-netlify/11879) on Netlify with the instructions for pointing a custom domain to a Netlify site. I ended up buying another domain directly from Netlify... DNS stuff is too confusing! üòµ‚Äçüí´

### Free domain name change

Let's walk through the free option first.

From the site overview Netlify page, click on `Site configuration`.

![](img/netlify-site-config.png){fig-alt="Netlify website site overview with box around site configuration." width="400"}

Scroll down to `Site information`, and then click on `Change site name`.

![](img/netlify-site-info.png){fig-alt="Site information page on Netlify with button to change site name." width="400"}

Now we can update the site name:

![](img/netlify-change-site-name.png){fig-alt="Netlify change site name dialog box with new name of my-website24.netlify.app."}

Note our site name is just the prefix to the full URL containing `netlify.app`.

### Buy a domain name

If we don't want the `netlify.app` domain, we could purchase our own. Instead of `Site configuration`, go to the `Domain management` part of the site, and then click `Add a domain`.

![](img/netlify-domain-mgmt.png){fig-alt="Domain management part of Netlify site with option to add a domain."}

Type in whatever custom domain we want. There are a bajillion different extensions -- [domain.com](https://www.domain.com/domains/new-domain-extensions) lists them alphabetically and has a helpful FAQ section about domain extensions. `my-website24.com` is available for \$13.99 for the first year.

![](img/netlify-add-custom-domain.png){fig-alt="Add a custom domain to our site page on netlify. It says my-website24.com is available and costs $13.99 for the first year." width="500"}

I like this option because Netlify automatically handles the DNS configurations!

## New `_publish.yml` file

Now that we're set up with Netlify and GitHub, let's head back to RStudio. Notice this new file appeared in the project directory when we used the `quarto publish netlify` command:

``` {.yaml filename="_publish.yml"}
- source: project
  netlify:
    - id: b9f73a69-06e7-4de2-9c7b-4f9855b56ba3
      url: 'https://stately-chimera-0c91c7.netlify.app'
```

It automatically filled in the original random URL from Netlify.

The next time we manually publish from the terminal, it will ask if we want to publish the update to `https://my-website24.netlify.app`. If we enter `y`, it will update the `url` value in the `_publish.yml` file.

``` {.bash filename="Terminal"}
(base) MacBook-Pro-4:my-website jadeyryan$ quarto publish netlify
? Publish update to: ‚Ä∫ https://stately-chimera-0c91c7.netlify.app (Netlify - jadey.nicole.ryan@gmail.com)
Rendering for publish:

[1/2] index.qmd
[2/2] about.qmd

[‚úì] Preparing to publish site
[‚úì] Uploading files (complete)
[‚úì] Deploying published site
[‚úì] Published site: https://stately-chimera-0c91c7.netlify.app

(base) MacBook-Pro-4:my-website jadeyryan$ quarto publish netlify
? Publish update to: ‚Ä∫ https://my-website24.netlify.app (Netlify - jadey.nicole.ryan@gmail.com)
Rendering for publish:

[1/2] index.qmd
[2/2] about.qmd

[‚úì] Preparing to publish site
[‚úì] Uploading files (complete)
[‚úì] Deploying published site
[‚úì] Published site: https://my-website24.netlify.app
```

::: callout-important
If you continue to the next steps for configuring continuous deployment, this should be your last time manually publishing your site with `quarto publish netlify` in the terminal.

However, if you add any code content, you should still run `quarto render` in your terminal to update the `_freeze` directory. Though, it's good practice to always render before pushing to GitHub.
:::

# Configure continuous deployment

Now we need to configure several things so Netlify's bots can automatically deploy and publish our site:

-   Add Quarto Netlify plugin files
-   Freeze code output by setting `freeze: auto` in `_quarto.yml`
-   Ignore output directory by adding `_site` directory to `.gitignore`
-   Link Netlify site to GitHub repository[^6]

[^6]: We've already connected our GitHub account to our Netlify in [Create and connect to GitHub] and [Connect and publish to Netlify] but we now need to pick which repository our Netlify site should link to.

## Configure Netlify plugin

The [Quarto Netlify plugin](https://github.com/quarto-dev/netlify-plugin-quarto) installs Quarto on the Netlify build server, allowing Netlify to build our Quarto website.

Let's create the `netlify.toml` and `package.json` files in our RStudio project and copy/paste the below content into these files.

``` {.toml filename="netlify.toml"}
[[plugins]]
package = "@quarto/netlify-plugin-quarto"
```

``` {.json filename="package.json"}
{
  "dependencies": {
    "@quarto/netlify-plugin-quarto": "^0.0.5"
  }
}
```

## Freeze computations

We need to [freeze](https://quarto.org/docs/projects/code-execution.html#freeze) computations so code only runs locally. When we render a `.qmd` that executes code on our local machine, the results get saved in a `html.json` file within the `_freeze` directory. This means that R and our packages don't need to be installed on the Netlify server to execute the code.

The `_freeze` directory and all its files must be committed to our repo. Otherwise, the build will fail because Netlify doesn't have R and the dependencies installed to run the code (see the detailed error in this GitHub issue [comment](https://github.com/quarto-dev/quarto-cli/issues/1956#issuecomment-1773958407)).

We'll add these two lines to our `_quarto.yml` file:

``` {.yaml filename="_quarto.yml"}
execute:
  freeze: auto
```

If you need to execute code within a CI service, see the [Quarto docs](https://quarto.org/docs/projects/code-execution.html#freeze) for example GitHub Actions that install Quarto, R, and all dependencies.

## Ignore output directory

Because we want Netlify bots to use continuous deployment to build our site, we need to ignore our output directory. To do this, we add the `_site` directory that contains all the rendered website content to our `.gitignore` file. This is recommended in the [Quarto docs](https://quarto.org/docs/publishing/netlify.html#ignoring-output-1) to avoid super messy diffs and potential merge conflicts.

``` {.bash filename=".gitignore"}
/_site/
```

::: callout-note
If you're not following the workflow in this blog post and instead are using the `Local Execution & Rendering` option of the CI continuum described in the [Quarto docs](https://quarto.org/docs/publishing/ci.html#rendering-for-ci), do not add `_site` to your `.gitignore`. You need this directory checked into version control so Netlify can access this content to publish your website.
:::

## Link Netlify site to GitHub repository

Now we need to link our GitHub repository to our Netlify site.

On Netlify, go to `Site configuration` \> `Build & deploy` \> `Continous deployment` \> `Link repository`.

![](img/netlify-link-repo.png){fig-alt="Netlify site on the continuous deployment page with a box around the link repository button." width="700"}

Choose `Deploy with GitHub`:

![](img/netlify-connect-git.png){fig-alt="Netlify site to connect to Git provider. Options to link site to Git repository for GitHub, GitLab, Bitbucket, and Azure DevOps." width="500"}

If you're already logged into GitHub, it should immediately authorize and allow you to select which repositories the Netlify app can access.

If this is your first time deploying with Netlify and GitHub, you'll likely need to click the bottom link `Configure the Netlify app on GitHub` near the bottom of the Netlify site. This should open a new window, `Installed GitHub App - Netlify`, where you can make sure the Netlify app is installed on your GitHub and select which repositories it can access.

![](img/netlify-select-repos.png){fig-alt="Netlify website Link your site to a Git Repository with box around 'Can't see your repo here? Configure the Netlify app on GitHub' link and arrow pointing to a new popup window that allows you to select which repositories Netlify can access."}

After selecting the correct repository, configure the build settings on the next screen. Enter `_site` in the `Publish directory` field:

![](img/netlify-build-settings.png){width="500" fig-alt="Netlify site configuration build settings. All settings are blank except the Publish directory should be set to _site."}

Then click `Deploy my-website24`, which take us back to our site overview page and it will now say `Deploys from GitHub` instead of `Manual deploys` below the link.

![](img/netlify-deploys-gh.png){width="400" fig-alt="Netlify site overview with website URL and text 'Deploys from GitHub'."}

## Push a change to our repo

Let's push a change to our repo and make sure it automatically redeploys and republishes our website!

Add some content to `about.qmd`, run `quarto render` in the terminal, and then push to `main`.

![](img/github-push-change.png){fig-alt="GitHub repository with recent commit 0b8b526."}

The `Deploys` page on Netlify tells us that we successfully published from `main@0b8b526`.

![](img/netlify-published.png){fig-alt="Netlify site Deploys page that shows main@0b8b526 was successfully published."}

### Auto publishing

Since we pushed directly to `main` and `auto publishing` is turned on in our Netlify deploy settings, all successful deployments are automatically published to our production site.

To turn this setting off, click `Lock to stop auto publishing`. The site will still deploy every time we push changes to our repo, but we need to click a button to actually publish this latest deployment. This is a good option if we don't want to work in new branches or use pull requests/merges in our workflow, but still want to preview our site before sending it to production.

Learn more about [auto publishing](https://docs.netlify.com/site-deploys/manage-deploys/#lock-a-published-deploy).

# Branch deploys and deploy previews

As we work on our website styling, content, and features, we probably want to preview our changes without messing up our live site. This is where Netlify branch deploys and deploy previews come into play!

The table below (adapted from [Netlify docs](https://docs.netlify.com/site-deploys/overview/)) provides a quick comparison of the differences between branch deploys and deploy previews.

+-------------------+-----------------------------------------------------+--------------------------------------------------------------------------------+
|                   | Branch deploys                                      | Deploy previews                                                                |
+===================+=====================================================+================================================================================+
| **Default setup** | Must setup on Netlify website[^7]                   | No setup needed                                                                |
+-------------------+-----------------------------------------------------+--------------------------------------------------------------------------------+
| **URL**           | \<`branch-name`\>\--\<`website`\>.netlify.app       | deploy-preview-\<`PR#`\>\--\<`website`\>.netlify.app                           |
|                   |                                                     |                                                                                |
|                   | ex. https://`staging`\--`my-website24`.netlify.app/ | ex. https://deploy-preview-`1`\--`my-website24`.netlify.app/                   |
+-------------------+-----------------------------------------------------+--------------------------------------------------------------------------------+
| **Access**        | Deploys section on Netlify                          | Deploys section on Netlify or Netlify bot comment on GitHub pull/merge request |
+-------------------+-----------------------------------------------------+--------------------------------------------------------------------------------+
| **Scope**         | Changes from feature branch                         | Changes from pull/merge request                                                |
+-------------------+-----------------------------------------------------+--------------------------------------------------------------------------------+

: {tbl-colwidths="\[10,45,45\]"}

[^7]: Set up branch deploys by going to Netlify.com \> \[Your website\] \> Site configuration \> Build & deploy \> Continuous Deployment \> Branches and deploy contexts

See more details on the differences between branch deploys and deploy previews in [Netlify's docs](https://docs.netlify.com/site-deploys/overview/).

## Branch deploys

Branch deploys are great if you typically use feature branches in your workflow.

By default, only the production branch (typically `main`) is automatically deployed by Netlify.

To enable branch deploys on other branches, we need to change the branch deploy setting. On the Netlify website \> `Site Configuration` \> `Build & deploy` \> `Continuous deployment` \> `Branches and deploy contexts` \> `Branch deploys` \> Select the `All` radio button.

![](img/netlify-branch-deploy-context.png){fig-alt="Netlify site configuration webpage with the branches and deploy contexts settings open. Branch deploys is set to All instead of None."}

Or, if we only want to deploy previews for a specific feature branch, select `Let me add individual branches` then enter the name of our feature branch.

Let's create a new branch called `staging` and push a commit with the message 'Testing branch deploy'.

On the Netlify `Deploys` page, we see our live site is still published from `main` but we now have a `Branch deploy` from `staging` that we can preview.

![](img/netlify-branch-deploy.png){fig-alt="Netlify deploys webpage for demo site highlighting the published site is deployed from the main production branch. Lower on the screen is the branch deploy which shows it was deployed from the staging branch."}

Click on the branch deploy to preview the site with the changes you made on the `staging` branch.

## Deploy previews

Deploy previews are enabled by default once our Netlify site is linked with our GitHub repository. Every time we make a pull request or merge, A Netlify bot will deploy our site and then comment the links to the deploy information.

From our GitHub repository, create a pull request to merge our `staging` branch into `main`.

The Netlify bot will deploy the site and then comment all the information for the deploy preview including a link to the commit, the deploy log, preview link, and a QR code to scan on a mobile device.

![](img/netlify-bot.png){fig-alt="GitHub merge request. Netlify bot commented a table with links to the latest commit, latest deploy log, deploy preview, and preview on mobile QR code."}

We can also access our deploy preview from the Netlify `Deploys` page. Similar to the branch deploy, our live site is still published from `main,` but we now have `Deploy Preview #2` from `staging`. Remember the #2 just means this was the second pull/merge request in our repository.

![](img/netlify-deploy-preview.png){fig-alt="Netlify deploys webpage for demo site highlighting the published site is deployed from the main production branch. Lower on the screen is the deploy preview which shows it was deployed from Pull Request #2."}

Click on the deploy preview #2 link to preview the site with the changes we made based on that pull request.

# Lighthouse plugin

Another benefit of Netlify are the integrations with different web tools. The only one I am using so far is [Google's Lighthouse tool](https://developer.chrome.com/docs/lighthouse/overview/), which helps me abide by my [accessibility commitment](https://jadeyryan.com/accessibility).

Once installed, the [Lighthouse plugin](https://github.com/netlify/netlify-plugin-lighthouse#readme) audits our site for performance, accessibility, best practices, and SEO at build time. We'll see our scores for each of these four categories in the Netlify bot comments.

To enable the plugin, let's go to our Netlify site \> `Integrations` \> search for lighthouse \> then click `Enable`.

![](img/netlify-lighthouse.png){fig-alt="Netlify integrations page searching for lighthouse with box highlighting the Enable button for the Lighthouse plugin."}

Netlify will then ask if we're sure we want to install Lighthouse on our website. It's that easy!

Let's try it out by pushing another commit to see our Lighthouse report in the Netlify bot comment.

Notice the original Netlify bot comment was edited so the GitHub pull request conversation isn't overly cluttered.

Our Lighthouse audit showed pretty high scores for each of the categories. We can view the more detailed breakdown to see where we can make improvements.

![](img/netlify-bot-lighthouse.png){fig-alt="GitHub pull request conversation with netlify bot comment that was edited with the latest commit, deploy log, preview URL, and Lighthouse audit."}

::: callout-note
You can also [manually run](https://developer.chrome.com/docs/lighthouse/overview/#devtools) a Lighthouse report in Chrome DevTools. But that takes away from the magic of the automated audit everytime you deploy your site with Netlify üòâ.
:::

# Workflow

My general workflow for editing my website is:

1.  Add/edit/remove content.

2.  Run `quarto rendeÔ∏èr`then `quarto preview` in the terminal.

3.  Use `Command`+`Shift`+`C` on Mac or `Control`+`Shift`+`C` on Windows to open Chrome DevTools and then `Command`+`Shift`+`M` on Mac or `Control`+`Shift`+`M` on Windows to toggle [device mode](https://developer.chrome.com/docs/devtools/device-mode/) for testing the webpage responsiveness on mobile.

4.  Push changes to GitHub (usually in a new branch).

5.  Preview changes on different devices because I don't fully trust Device Mode!

6.  Edit based on Lighthouse audit scores.

7.  Rinse and repeat!

# Wrap up

I hope you found this post helpful for getting your Quarto website configured with Netlify, GitHub, and continuous deployment!

Since this is my first blog post, I'd love feedback on the style, flow, helpfulness, content, etc. I have a new-found, very deep appreciation for all the bloggers out there! This took quite a lot of time and head space to make a \[hopefully\] cohesive and helpful post!

# References {.unnumbered}
